实验一  图书管理系统案例分析（一）
数据库分析
一、相关知识点
	1、java基础知识
	2、Eclipse环境的基本配置
	3、MySql的安装和基本功能
	4、数据库基础知识
二、实验目的：
	分析图书管理系统的组成部分，理解其数据库设计和程序模块；在教师指导下阅读各模块的程序，理解持久数据、内存数据、感官数据的基本转换方式。
三、实验内容：
MySql数据库安装配置：参考讲义中的安装过程。（课后在个人电脑中自行完成）
【实验结果与分析】
MySql数据库服务器的默认端口是什么？ 
3306
MySql数据库服务器的默认用户名是什么？
root
Windows服务列表中，mySql服务名称是什么？
我在安装时自定义了服务名称:MySQL_service

MySql中用于管理数据库的工具是什么？
MySQL workbench
自行下载安装Navicat，并尝试通过Navicat访问数据库。请给出通过Navicat查询图书表后的屏幕截图。
//使用的是最新版本


图书管理系统实施：参考讲义中的实施过程，包括数据库及系统。

【实验结果与分析】
用管理员账号登陆后的界面
//学校机房

//个人电脑



用表格形式编写数据库表的设计，表格格式如下。并指出每张表的主码和外码
**表设计（黑体字字段为主码）

字段名
中文名称
数据类型
能否为空
说明

pubid
出版社ID
varchar(20)
否


address
地址
varchar(200)
可















beanbook表设计（黑体字字段为主码）

字段名
中文名称
数据类型
能否为空
说明

barcode
条形码
varchar(20)
否
主码

bookname
书名
varchar(200)
否


pubid
出版社ID
varchar(20)
可
外码

price
价格
double
否


state
状态
varchar(20)
否



beanbooklendrecord表设计（黑体字字段为主码）

字段名
中文名称
数据类型
能否为空
说明

id
ID
int(11)
否
主码

readerid
读者ID
varchar(20)
否
外码

bookBarCode
书籍条形码
varchar(20)
否
外码

lendDate
借出日期
datetime
否


returnDate
归还日期
datetime
可


lendOperUserid
借出操作员ID
varchar(20)
否
外码

returnOperUserid
归还操作员ID
varchar(20)
可
外码

penalSum
违约金
double
可



beanpublisher表设计（黑体字字段为主码）

字段名
中文名称
数据类型
能否为空
说明

pubid
出版社ID
varchar(20)
否
主码

publisherName
出版社名称
varchar(50)
否
唯一

address
地址
varchar(200)
可



beanreader表设计（黑体字字段为主码）

字段名
中文名称
数据类型
能否为空
说明

readerid
读者ID
varchar(20)
否
主码

readerName
读者姓名
varchar(50)
否


readerTypeId
读者类型ID
int(11)
否


lendBookLimited
借书限制
int(11)
否


createDate
创建日期
datetime
否


creatorUserId
创建人用户ID
varchar(20)
否


removeDate
移除日期
datetime
可


removerUserId
移除人用户ID
varchar(20)
可


stopDate
停止日期
datetime
可


stopUserId
停止用户ID
varchar(20)
可



beanreadertype表设计（黑体字字段为主码）

字段名
中文名称
数据类型
能否为空
说明

readerTypeId
读者类型ID
int(11)
否
主码

readerTypeName
读者类型名称
varchar(50)
否
唯一

lendBookLimited
借书限制
innt(11)
否



beansystemuser表设计（黑体字字段为主码）

字段名
中文名称
数据类型
能否为空
说明

userid
用户ID
varchar(20)
否
主码

username
用户名称
varchar(50)
否


pwd
密码
varchar(32)
否


usertype
用户已类型
varchar(20)
否


createDate
创建日期
datetime
否


removeDate
移除日期
datetime
可




利用powerdesign根据数据库表结构绘制ER图，并生成关系模式。

//ER图


//关系模式


通过脚本默认加入的数据在哪张表？

beansystemuser




找出目前程序的问题，并通过修改数据库设计解决问题，请写出具体的数据库修改内容。

发现的问题:
当创建一个系统用户并删除后,再次添加该用户会显示账户已经存在



//发现数据库中存在信息



//研究createUser函数的代码发现,是因为前端将数据库中已经移除的用户记录误认为是活跃的用户记录


//将SystemUserManger.java中createUser函数相应位置的语句改为如下就能修复该问题
//该语句通过再次查询是否存在包含移除日期并且userid相同的记录来判断是否应该继续插入




程序功能点分析
请说明登陆模块中，用户帐号不存在时，程序通过什么样的机制发现这种问题，会给出什么提示。

//程序比对数据库中的信息



如果要增加读者自行登陆功能，应该如何修改数据库设计，并在哪些类中增加哪些函数（ui部分不需要描述），分别描述这些函数的逻辑，并根据用户登录部分的实现，编写这些代码。

首先在数据库中的beanreader表添加一个readerPwd属性指代用户密码
在SystemUserManager类的loadUser方法中开头多加一个if判断
通过用户的选择选择登录方式,运行相应的代码
try {
			conn=DBUtil.getConnection();
			String sql="select readerid,readerName,readerTypeId,lendBookLimitted,createDate,createrUserId,removeDate,removerUserId,stopDate,stopUserId,rpwd from BeanSystemUser where readerid=?";
			java.sql.PreparedStatement pst=conn.prepareStatement(sql);
			pst.setString(1,readerid);
			java.sql.ResultSet rs=pst.executeQuery();
			if(!rs.next()) throw new BusinessException("读者用户不存在");
			BeanSystemUser u=new BeanSystemUser();
			u.setReaderid(rs.getString(1));
			u.setReaderName(rs.getString(2));
			u.setReaderTypeId(rs.getString(3));
			u.setLendBookLimitted(rs.getString(4));
			u.setCreateDate(rs.getDate(5));
			u.setCreaterUserId(rs.getString(6));
			u.setRemoveDate(rs.getDate(7));
			u.setRemoverUserId(rs.getString(8));
			u.setStopDate(rs.getDate(9));
			u.setStopUserId(rs.getString(10));
			r.setRpwd(rs.getString(11));
			if(u.getRemoveDate()!=null) throw new BusinessException("该账号已经被删除");
			rs.close();
			pst.close();
			return u;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new DbException(e);
		}
		finally{
			if(conn!=null)
				try {
					conn.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}



常规程序模块分析
【实验结果与分析】
分析用户管理模块，描述用户添加、重置密码、删除过程涉及的java类、数据库表，并说明实现该功能的流程（说明哪个类实现什么功能、数据库表发生什么变化）
SystemUserManager类中打包了相应用户管理模块

loadAllUsers函数将所有用户信息导入(加载)
createUser函数用于创建新的用户
changeUserPwd函数修改指定用户的密码
resetUserPwd函数用于重设用户密码
deleteUser函数删除指定的用户
loadUser加载指定的用户

仅仅涉及
BeanSystemUser表



分析读者管理模块，描述读者查询过程涉及的java类、数据库表，并说明实现该功能的流程（说明哪个类实现什么功能）
读者管理模块文件中,ReaderManager类打包了各种用于读者管理的函数

modifyReaderType函数实现修改读者类型功能
deleteReaderType函数实现删除读者类型功能
searchReader函数实现读者查找功能
createReader函数实现创建新读者项的功能
renameReader函数实现对已有读者项进行重命名的功能
changeReaderType函数实现修改读者类型功能
removeReader函数用于删除已有的读者项

涉及BeanReaderType 表和BeanReader表

分析图书管理模块，描述读者查询过程涉及的java类、数据库表，并说明实现该功能的流程（说明哪个类实现什么功能）
BookManager类打包了各种针对图书管理的函数

searchBook函数用于查找目标书籍
createBook函数用于新建书籍项目
modifyBook函数用于修改已存在的书籍
loadBook函数用于加载书籍

涉及表:
beanbook
beanpublisher


5、复杂业务模块分析
分析图书借阅模块，描述图书借阅流程（说明哪个类实现什么功能、数据库表中的数据发生什么变化，说明不能进行图书借阅的几种情况），说明java是如何进行事务管理的。

BookLendManager类用来管理借阅和归还操作
类中有如下函数,分别实现相应功能
loadReaderLentBooks
加载指定读者的全部借书记录

lend
借书,并且对情况进行分析,如果不满足则无法借阅
如果成功借阅会向BeanBookLendRecord表中插入记录
并且将beanbook表中相应书籍的状态进行更新


loadUnReturnRecord


loadBookAllRecode
loadReaderAllRecode
staticBookLend

不能进行借阅的情况:
1, 读者不存在
2, 读者已注销
3, 读者已挂失
4, 图书不存在
5, 超出限额



分析图书归还模块，描述归还流程（说明哪个类实现什么功能、数据库表中的数据发生什么变化）

BookLendManager类用来管理借阅和归还操作

returnBook
归还书籍,如果数据库中不存在借阅记录则无法归还
成功归还后会更新BeanBookLendRecord表中的借阅记录
并且将BeanBook表中的相应书籍的状态设置为”在库”






